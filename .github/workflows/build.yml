name: CI Pipeline
on:
  push:
    branches: [master]
  pull_request:
    types: [opened, synchronize, reopened]

env:
  COMPOSE_BAKE: true
  PLAYWRIGHT_DEPS: libglib2.0-0t64 libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 libdbus-1-3 libxcb1 libxkbcommon0 libx11-6 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxrandr2 libgbm1 libpango-1.0-0 libcairo2 libasound2t64 libatspi2.0-0 libwayland-client0

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prevent service restarts
        run: |
          sudo mkdir -p /etc/needrestart/conf.d/
          echo "\$nrconf{restart} = 'a';" | sudo tee /etc/needrestart/conf.d/99-disable-restarts.conf > /dev/null
          echo "PackageKitEnable=false" | sudo tee -a /etc/PackageKit/PackageKit.conf > /dev/null

      - uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends ${{ env.PLAYWRIGHT_DEPS }}
          sudo apt-get clean

      - name: Start Services
        run: |
          docker compose up -d --build
          for i in {1..30}; do
            if docker compose ps | grep -q "healthy" && curl -s http://localhost:80 >/dev/null; then
              echo "Services ready!" && exit 0
            fi
            echo "Waiting for services... ($i/30)"
            sleep 10
          done
          exit 1

      - uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Playwright
        run: |
          cd backend
          mvn com.microsoft.playwright:playwright-maven-plugin:install

      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd backend
          mvn -B clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=Brupez_EletricNET \
            -Dsonar.organization=eletricnet \
            -Dsonar.host.url=https://sonarcloud.io

      - uses: mikepenz/xray-action@v3
        with:
          xrayCloud: true
          username: ${{ secrets.XRAY_CLIENT_ID }}
          password: ${{ secrets.XRAY_CLIENT_SECRET }}
          testFormat: 'junit'
          projectKey: 'EN'
          testPaths: '**/target/surefire-reports/*.xml'

      - name: Cleanup
        if: always()
        run: docker compose down -v

  deploy:
    name: Deploy
    needs: sonarqube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: docker compose up -d --build
      - run: |
          for i in {1..30}; do
            if docker compose ps | grep -q "healthy" && curl -s http://localhost >/dev/null; then
              echo "Deployed!" && exit 0
            fi
            sleep 10
          done
          exit 1

  lighthouse:
    name: Lighthouse
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: browser-actions/setup-chrome@v1
      - run: docker compose up -d --build
      - run: sleep 20
      - uses: treosh/lighthouse-ci-action@v12
        id: lighthouse
        with:
          urls: "http://localhost"
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: ./lighthouserc.json
        continue-on-error: true
      - name: Format Results
        id: format_results
        run: |
          SCORES=$(jq -r --compact-output '[.categories[] | {id: .id, score: (.score*100|round)}]' .lighthouseci/lhr-*.json 2>/dev/null || echo '[]')
          echo "scores=$SCORES" >> $GITHUB_OUTPUT
      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const scores = ${{ steps.format_results.outputs.scores }};
            let comment = "## âš¡ Lighthouse Results\n\n";
            scores.forEach(({id, score}) => {
              comment += `- ${score >= 90 ? 'ðŸŸ¢' : score >= 50 ? 'ðŸŸ ' : 'ðŸ”´'} ${id}: ${score}/100\n`;
            });
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.issue.number,
              body: comment
            });

  cleanup:
    name: Cleanup
    needs: lighthouse
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: |
          docker compose down -v || true
          docker system prune -af

  check-required:
    name: Check Status
    needs: [sonarqube, deploy, lighthouse]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: |
          [ "${{ needs.sonarqube.result }}" = "success" ] && \
          [ "${{ needs.deploy.result }}" = "success" ] && \
          [ "${{ needs.lighthouse.result }}" = "success" ] || exit 1